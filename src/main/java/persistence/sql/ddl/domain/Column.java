package persistence.sql.ddl.domain;

import java.lang.reflect.Field;

import static persistence.sql.QueryBuilder.CONSTRAINT_MAPPER;
import static persistence.sql.QueryBuilder.TYPE_MAPPER;

public class Column {

    private final String name;

    private final String type;

    private final Constraint constraint;

    public Column(Field field) {
        this.name = createColumnName(field);
        this.type = createColumnType(field);
        this.constraint = new Constraint(field);
    }

    public String createColumnName(Field field) {
        if (!field.isAnnotationPresent(jakarta.persistence.Column.class)) {
            return field.getName().toUpperCase();
        }

        jakarta.persistence.Column column = field.getAnnotation(jakarta.persistence.Column.class);
        if (column.name().isEmpty()) {
            return field.getName().toUpperCase();
        }
        return column.name().toUpperCase();
    }

    public String createColumnType(Field field) {
        return TYPE_MAPPER.getTypeString(field);
    }

    public String getType() {
        return type;
    }

    public String getName() {
        return name;
    }

    public Constraint getConstraint() {
        return constraint;
    }

    public String getConstraintString() {
        return CONSTRAINT_MAPPER.getConstraintString(constraint);
    }

    public boolean isPrimaryKeyAndAutoGenerated() {
        return constraint.isPrimaryKey() && constraint.isAutoGenerated();
    }
}
