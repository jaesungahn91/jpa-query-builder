package persistence.sql.dml;

import persistence.sql.QueryBuilder;
import persistence.sql.ddl.domain.Column;
import persistence.sql.ddl.domain.Columns;
import persistence.sql.ddl.domain.Table;
import persistence.sql.dml.domain.Value;
import persistence.sql.dml.domain.Values;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class InsertQueryBuilder implements QueryBuilder {

    private static final String INSERT_QUERY = "INSERT INTO %s (%s) VALUES (%s);";

    private final Columns columns;
    private final Table table;
    private final Values values;

    public InsertQueryBuilder(Object object) {
        Class<?> clazz = object.getClass();
        this.table = new Table(clazz);
        this.columns = new Columns(createColumns(clazz));
        this.values = new Values(createValues(object, clazz));
    }

    private List<Column> createColumns(Class<?> clazz) {
        return Arrays.stream(clazz.getDeclaredFields())
                .filter(this::isNotTransientAnnotationPresent)
                .map(Column::new)
                .collect(Collectors.toList());
    }

    private List<Value> createValues(Object object, Class<?> clazz) {
        return Arrays.stream(clazz.getDeclaredFields())
                .filter(this::isNotTransientAnnotationPresent)
                .map(field -> new Value(new Column(field), field, object))
                .collect(Collectors.toList());
    }

    @Override
    public String build() {
        return String.format(
                INSERT_QUERY,
                table.getName(),
                generateColumns(),
                generateValues()
        );
    }

    private String generateColumns() {
        return columns.getColumns().stream()
                .filter(column -> !column.isPrimaryKeyAndAutoGenerated())
                .map(this::generateColumn)
                .filter(s -> !s.isEmpty())
                .collect(Collectors.joining(COMMA));
    }

    private String generateColumn(Column column) {
        if (column.getConstraint().isPrimaryKey() && column.getConstraint().isAutoGenerated()) {
            return EMPTY_STRING;
        }
        return column.getName();
    }

    private String generateValues() {
        return values.getValues().stream()
                .filter(value -> !value.getColumn().isPrimaryKeyAndAutoGenerated())
                .map(Value::getValue)
                .filter(s -> !s.isEmpty())
                .collect(Collectors.joining(COMMA));
    }
}
